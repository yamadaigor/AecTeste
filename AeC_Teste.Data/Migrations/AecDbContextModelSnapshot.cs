// <auto-generated />
using System;
using AeC_Teste.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AeC_Teste.Data.Migrations
{
    [DbContext(typeof(AecDbContext))]
    partial class AecDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AeC_Teste.Business.Entidades.LogErro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataErro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MensagemErro")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TipoException")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LogErro", (string)null);
                });

            modelBuilder.Entity("AeC_Teste.Business.Entidades.PrevisaoTempoAeroporto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtualizadoEm")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoIcao")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Condicao")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CondicaoDescricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirecaoVento")
                        .HasColumnType("int");

                    b.Property<int>("PressaoAtmosferica")
                        .HasColumnType("int");

                    b.Property<float>("Temperatura")
                        .HasColumnType("real");

                    b.Property<int>("Umidade")
                        .HasColumnType("int");

                    b.Property<int>("Vento")
                        .HasColumnType("int");

                    b.Property<string>("Visibilidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PrevisaoTempoAeroporto", (string)null);
                });

            modelBuilder.Entity("AeC_Teste.Business.Entidades.PrevisaoTempoCidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condicao")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPrevisao")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoCondicao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdCidade")
                        .HasColumnType("int");

                    b.Property<int>("IndiceUV")
                        .HasColumnType("int");

                    b.Property<string>("NomeCidade")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TemperaturaMaxima")
                        .HasColumnType("int");

                    b.Property<int>("TemperaturaMinima")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PrevisaoTempoCidade", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
